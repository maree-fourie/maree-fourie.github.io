---
title: Property Based Testing
lang: en
toc-title: Contents
pagetitle: Property Based Testing
---

- [1. Property Based Testing](#1-property-based-testing)
- [Bibliography](#bibliography)
      - [[1]](#1)
      - [[2]](#2)
      - [[3]](#3)

# 1. Property Based Testing

Using unit testing to verify code correct is not always effective. The code contracts
encode the specification, we there for only have to show that the code we wrote
does not breach the contract to verify the code.

We can represent a program or section of a program, unit, as a mathematical function
 $(f)$. All possible legal permutations of inputs are the function's domain $(I)$ and
the outputs are the function's range $(O)$.

$$ f: I \rightarrow O $$

It would be impractical to write unit tests that cover the complete domain
of a unit. Instead we randomly select inputs from the domain. When we tests smaller
units, random testing is adequate [[2]](####-2).
We are not going to verify the outputs because,
if the outputs adhere to the contracts we assume the outputs are valid. This will
eliminate the oracle problem [[1]](####-1) [[2]](####-2).

We will be using FsCheck to select the random inputs. FsCheck is a .net implementation
of QuickCheck [[3]](####-3). We use the xUnit test framework to make
writing the test more convenient.

The tests have two parts, the input generators and tests action. We first look at the generators.
We group the test inputs using tuples. The generator code filters the generated value according
to the contracts.

----

A property is just something like:

for all (x, y, ...)
such as precondition(x, y, ...) holds
property(x, y, ...) is true

---

**Benefits**

They are numerous:

Cover the scope of all possible inputs: by construct, it does not restrict the generated inputs if not asked to do so. Consequently it can theorically generate all possible inputs and cover the whole range of strings, integers or whatever type required by the system under test.
Shrink the input in case of failure: whenever it fails, the framework tries to reduce the input to a smaller input. For instance: if the condition of the failure is the existence of a given character in a string it should return the one-character string having only this character. This is certainly one of the most interesting features of such approach as most of the time the failure can be summarized by a very small case.
Reproducible and replayable: each time it runs a property test, a seed is produced in order to be able to re-run the test again on the same datasets. Any run failure causes the framework to print both the failing case and the seed in order to be able to fully reproduce the run.
It is also important to note that it does not — by any means — replace unit testing. It only provides an additional layer of tests that might prove very efficient to reduce some boilerplate tests.

# Bibliography

#### [1]

Koen Claessen and John Hughes. **QuickCheck: A Lightweight Tool for Random Testing of Haskell Programs**. In: Proceedings of the ACM SIGPLAN International Conference on Functional Programming, ICFP 46 (Jan. 2000). DOI: 10.1145/1988042.1988046.

#### [2]

Richard Hamlet. **Random Testing**. In: Encyclopedia of Software Engineering. Wiley, 1994,
pp. 970–978.

#### [3]

**FsCheck**. https://fscheck.github.io/FsCheck/index.html. [Online; accessed 3-
December-2019].